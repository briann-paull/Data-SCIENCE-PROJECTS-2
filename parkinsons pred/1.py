#importing apiimport numpy as npimport pandas as pdimport matplotlib.pyplot as plt#reading datadf=pd.read_csv('parkinsons.data', encoding = "ISO-8859-1")#data preprocessingdf=df.drop(["name"],axis=1)print(df.isnull().any())unique=df["status"].value_counts(sort=True)unique.plot(kind="bar", rot=0)plt.title="0/1"plt.show()#spliting datay=df["status"]x=df.drop(["status"],axis=1)#resamplingfrom imblearn.combine import SMOTETomekim=SMOTETomek()X_new,y_new=im.fit_sample(x,y)X_newy_newprint(X_new.shape,y_new.shape)from collections import Counterprint("old y_distribution",format(Counter(y)))print("new y_distribution",format(Counter(y_new)))from sklearn.preprocessing import MinMaxScalerscaler=MinMaxScaler()X=scaler.fit_transform(X_new)Y=y_new#applying PCAfrom sklearn.decomposition import PCApca=PCA(n_components=2)nx=pca.fit_transform(X)#train test splitfrom sklearn.model_selection import train_test_splitX_train,X_test,y_train,y_test=train_test_split(nx,Y,test_size=1/4,random_state=1)#importing api'sfrom sklearn.linear_model import LogisticRegressionfrom sklearn.svm import SVCfrom sklearn.naive_bayes import GaussianNBfrom sklearn.cluster import DBSCANfrom sklearn.cluster import KMeansfrom sklearn.ensemble import RandomForestClassifierfrom xgboost import XGBClassifier    from sklearn.model_selection import cross_val_scoreprint("LogistRegressionScore")score0=cross_val_score(LogisticRegression(solver='saga', max_iter=1000000),X_train,y_train,cv=3)print(score0)print(np.average(score0))print("SVC Score")score1=cross_val_score(SVC(),X_train,y_train,cv=3)print(score1)print(np.average(score1))print("NavieBayes Score")score2=cross_val_score(GaussianNB(),X_train,y_train,cv=3)print(score2)print(np.average(score2))print("Random_Forest Score ")score5=cross_val_score(RandomForestClassifier(n_estimators=15),X_train,y_train,cv=5)print(score5)print(np.average(score5))print("XGB Sore")score6=cross_val_score(XGBClassifier(learning_rate=0.1,n_estimators=2,random_state=1),X_train,y_train,cv=8)print(score6)print(np.average(score6))model=RandomForestClassifier()model.fit(X_train,y_train)y_pred=model.predict(X_test)print(model.score(X_test,y_test))from sklearn.metrics import confusion_matrixcm=confusion_matrix(y_test,y_pred)                        